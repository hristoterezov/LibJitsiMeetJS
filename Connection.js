var Conference = require("./Conference");

/**
 * Creates new connection object for the Jitsi Meet server side video conferencing service. Provides access to the
 * Conference interface.
 * @param appID identification for the provider of Jitsi Meet video conferencing services.
 * @param token secret generated by the provider of Jitsi Meet video conferencing services.
 * The token will be send to the provider from the Jitsi Meet server deployment for authorization of the current client.
 * @param config Object with properties/settings specific to the Connection. 
 * @constructor
 */
function Connection(appID, token, config) {

}

/**
 * Connect the client with the server.
 * @param successCallback this callback will be called when the connection is successfull
 * @param errorCallback this callback will be called when the connection fail.
 */
Connection.prototype.connect = function (successCallback, errorCallback) {

}

/**
 * Disconnect the client from the server.
 * @param successCallback this callback will be called when we have successfully disconnected
 * @param errorCallback this callback will be called when the disconnect didn't succeed
 */
Connection.prototype.disconnect = function (successCallback, errorCallback) {

}

/**
 * This method allows renewal of the tokens if they are expiring.
 * @param token the new token.
 */
Connection.prototype.setToken = function (token) {

}

/**
 * Creates and joins new conference.
 * @param name the name of the conference; if null a generated name will be provided from the API.
 * @param config Object with properties/settings specific to the Conference to be created.
 * @returns {Conference} returns the new Conference object.
 */
Connection.prototype.initConference = function (name, options) {
    return new Conference();
}

module.exports = Connection;
